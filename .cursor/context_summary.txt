# DocAI - Quick Context Summary

## Stack
Django 5.1 + Django Ninja → Next.js 15 + React 19
JWT auth (HTTP-only cookies) + Google OAuth (PKCE)

## Architecture Pattern
Backend: API Route → Service Layer → Models
Frontend: SWR + Auth Context + Shadcn UI

## Key Rules
✓ Business logic in services, not API routes
✓ Custom exceptions → HTTP errors in API layer
✓ Permission checks in services (is_owner or is_doc_user)
✓ SWR for all data fetching (never direct fetch in components)
✓ API proxy routes (/api/*) for frontend → backend
✓ Strategic caching with invalidation
✓ Functional components + hooks only
✓ UUID primary keys for user-facing models

## Current Branch: user-invites
DocUser model for collaborative document access
Owner + invited users pattern

## File Structure
backend/src/{app}/
  models.py → schemas.py → exceptions.py → services.py → api.py
frontend/src/
  app/ (pages) | components/ (UI) | lib/ (utils)

## Auth Flow
Login → JWT tokens → HTTP-only cookies → user_required decorator

## Quick Patterns
# Backend service
def list_documents(user=None, force=False):
    cache_key = DOC_CACHE_KEY.format(user_id=user.id)
    # business logic here

# Frontend data fetch
const {data, error, isLoading, mutate} = useSWR(endpoint, fetcher)

Full context: .cursor/instruction_context.md

